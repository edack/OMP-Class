"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.ALL_TOKEN_TYPES = exports.TOKEN_TYPE_APIML = exports.TOKEN_TYPE_JWT = exports.TOKEN_TYPE_LTPA = exports.AUTH_TYPE_TOKEN = exports.AUTH_TYPE_BEARER = exports.AUTH_TYPE_BASIC = exports.AUTH_TYPE_NONE = exports.HTTPS_PROTOCOL = exports.HTTP_PROTOCOL = void 0;
/* We were unable to export constants and types from a class and use
 * those constants or types within the definition of a property in an interface.
 * So we declared simple constants and types and exported them from this module.
 */
/**
 * http protocol
 */
exports.HTTP_PROTOCOL = "http";
/**
 * https protocol
 */
exports.HTTPS_PROTOCOL = "https";
/**
 * Session type property value for no authentication
 */
exports.AUTH_TYPE_NONE = "none";
/**
 * Session type property value for basic authentication
 */
exports.AUTH_TYPE_BASIC = "basic";
/**
 * Session type property value for bearer token authentication
 */
exports.AUTH_TYPE_BEARER = "bearer";
/**
 * Session type property value for cookie token authentication,
 * which uses a named token type.
 */
exports.AUTH_TYPE_TOKEN = "token";
/**
 * tokenType property value for IBM's LTPA2 token
 */
exports.TOKEN_TYPE_LTPA = "LtpaToken2";
/**
 * tokenType property value for a JWT token
 */
exports.TOKEN_TYPE_JWT = "jwtToken";
/**
 * tokenType property value for an API Mediation Layer token
 */
exports.TOKEN_TYPE_APIML = "apimlAuthenticationToken";
/**
 * list that specifies the choice of token types
 */
exports.ALL_TOKEN_TYPES = [
    exports.TOKEN_TYPE_APIML,
    exports.TOKEN_TYPE_JWT,
    exports.TOKEN_TYPE_LTPA
];
//# sourceMappingURL=SessConstants.js.map